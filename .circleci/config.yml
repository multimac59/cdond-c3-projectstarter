version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        default: "mittamm"
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name "udapeople-back-end-<<parameters.workflow_id>>"
            aws cloudformation delete-stack --stack-name "udapeople-front-end-<<parameters.workflow_id>>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        default: "mittamm"
        type: string  
    steps:
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            export SUCCESS=$(curl --insecure "https://kvdb.io/76aJ5hyLgcFC1uYEYVXt2n/migration_<<parameters.workflow_id>>")
            if (( $SUCCESS == 1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  install_awscli:
    description: Install AWS CLI
    steps:
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  
  install_nodejs:
     description: Install Node.js 13
     steps:
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - run:
          name: Send value for backend key to kvdb
          command: |
            curl --insecure https://kvdb.io/76aJ5hyLgcFC1uYEYVXt2n/backend-build  -d 'backend/node_modules'

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend dependencies
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install depedencies
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-mittamm" \
              --parameter-overrides ID="mittamm"  \
              --tags project=udapeople-backend
 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-mittamm" \
              --parameter-overrides ID="mittamm"  \
              --tags project=udapeople-frontend
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            cd .circleci/ansible
            # cat inventory.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text --filter Name=tag:Name,Values=backend-mittamm >> inventory.txt
            cat inventory.txt

            # echo "[all]" > ~/project/.circleci/ansible/inventory.txt
            # aws ec2 describe-instances \
            #   --filter "Name=instance-state-name,Values=running" \
            #   --query 'Reservations[*].Instances[*].PublicIpAddress' \
            #   --output text >> ~/project/.circleci/ansible/inventory.txt
            # cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image: cimg/base:stable  # python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "1d:45:27:5d:09:03:42:8c:50:94:11:95:53:43:a2:8b"
      - attach_workspace:
          at: ~/
      - install_ansible
      - install_awscli
      - run:
          name: Run Playbook and Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt

            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - install_awscli
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            # npm install   
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/76aJ5hyLgcFC1uYEYVXt2n/migration_mittamm  -d '1'
            fi
     # - destroy-environment
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "1d:45:27:5d:09:03:42:8c:50:94:11:95:53:43:a2:8b"
      - attach_workspace:
          at: ~/
      # Dependencies installation
      - install_nodejs
      - install_awscli
      - install_ansible
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filter Name=tag:Name,Values=backend-mittamm \
              --output text 
            )

            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            sudo npm install -g npm@latest
            rm -rf node_modules
            npm install
            npm run build
            tar -czvf artifact-"mittamm".tar.gz dist
            aws s3 cp dist s3://udapeople-mittamm --recursive
      - destroy-environment
      - revert-migrations
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "1d:45:27:5d:09:03:42:8c:50:94:11:95:53:43:a2:8b"
      - attach_workspace:
          at: ~/
      # Dependencies installation
      - install_nodejs
      - install_awscli
      - install_ansible
      - run:
          name: Deploy backend
          command: |
            cd backend

            npm i
            npm run build
            cd ..

            cd .circleci/ansible
            mkdir files
            cd files
            tar -C ../../../backend -czvf artifact.tar.gz .
            cd ../
            
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_nodejs
      - install_awscli
      - run:
          name: Backend smoke test.
          command: |
              BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
                --filters "Name=tag:Name,Values=backend-mittamm" \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text)
              export API_URL=http://${BACKEND_PUBLIC_IP}:3030
              echo ${BACKEND_PUBLIC_IP}
              echo backend-mittamm
              echo ${API_URL}
              if curl -s $API_URL/api/status | grep "ok"
              then
                exit 0
              else
                exit 1
              fi
      - run:
          name: Frontend smoke test.
          command: |
              FRONTEND_WEBSITE=http://udapeople-mittamm.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
              echo $FRONTEND_WEBSITE
              if curl -s $FRONTEND_WEBSITE | grep "Welcome"
              then
                exit 0
              else
                exit 1
              fi
      - destroy-environment
      - revert-migrations
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependency
          command:
            yum install -y gzip
            yum install -y tar
      - run:
          name: Get old WorkflowID and persist it
          command: |
            aws cloudformation list-exports \
              --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text >> ~/project/oldWorkflowID.txt
            cat ~/project/oldWorkflowID.txt
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="mittamm" \
              --stack-name InitialStack

            echo Current Workflow ID: "mittamm"
            cat ~/project/oldWorkflowID.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/oldWorkflowID.txt
      - destroy-environment
      # Here's where you will add some code to rollback on failure  

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependency
          command:
            yum install -y gzip
            yum install -y tar
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous S3 bucket and CloudFormation stack.
          command: |
            export oldWorkflowID=$(cat ~/project/oldWorkflowID.txt)
            echo OldWorkflowID: "${oldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID: "mittamm"

            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
    
            if [[ "mittamm" != "${oldWorkflowID}" ]]
            then
              echo "-------------------- Start Cleanup: Deleting S3 & its stack in progress 0%... --------------------"
              aws s3 rm "s3://udapeople-${oldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${oldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${oldWorkflowID}"
              echo "-------------------- [DELETED CONFIRMED! 100%] --------------------"              
            else
              echo "-------------------- CLEANUP FAILED! --------------------"
            fi
            
            
workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure: 
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
      - rum-migrations